module pipelined_processor(input clk, input reset);

// ===== Parameters =====
parameter DATA_WIDTH = 8;
parameter REG_WIDTH = 4;
parameter MEM_SIZE  = 16;

// ===== Instruction Opcodes =====
localparam ADD  = 2'b00;
localparam SUB  = 2'b01;
localparam AND  = 2'b10;
localparam LOAD = 2'b11;

// ===== Instruction Format =====
// [7:6] Opcode | [5:4] DestReg | [3:2] SrcReg1 | [1:0] SrcReg2/Addr

// ===== Memories =====
reg [DATA_WIDTH-1:0] instr_mem [0:MEM_SIZE-1];
reg [DATA_WIDTH-1:0] data_mem  [0:MEM_SIZE-1];
reg [DATA_WIDTH-1:0] reg_file  [0:REG_WIDTH-1];

// ===== Pipeline Registers =====
reg [DATA_WIDTH-1:0] IF_ID, ID_EX, EX_WB;
reg [DATA_WIDTH-1:0] PC;

// ===== Helper Wires =====
wire [1:0] opcode_ID, opcode_EX;
wire [1:0] rd_ID, rd_EX;
wire [1:0] rs1_ID, rs1_EX;
wire [1:0] rs2_ID, rs2_EX;
wire [DATA_WIDTH-1:0] alu_a, alu_b, alu_res;
wire [DATA_WIDTH-1:0] mem_data;

// ===== Assigns for Decode =====
assign opcode_ID = IF_ID[7:6];
assign rd_ID     = IF_ID[5:4];
assign rs1_ID    = IF_ID[3:2];
assign rs2_ID    = IF_ID[1:0];

assign opcode_EX = ID_EX[7:6];
assign rd_EX     = ID_EX[5:4];
assign rs1_EX    = ID_EX[3:2];
assign rs2_EX    = ID_EX[1:0];

assign alu_a = reg_file[rs1_EX];
assign alu_b = (opcode_EX == LOAD) ? 0 : reg_file[rs2_EX];

// ===== ALU =====
assign alu_res = (opcode_EX == ADD)  ? (alu_a + alu_b)    :
                 (opcode_EX == SUB)  ? (alu_a - alu_b)    :
                 (opcode_EX == AND)  ? (alu_a & alu_b)    :
                 (opcode_EX == LOAD) ? data_mem[rs2_EX]   :
                 0;

// ===== Write Back =====
assign mem_data = (opcode_EX == LOAD) ? alu_res : alu_res;

// ===== Pipeline =====
integer i;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        PC <= 0;
        IF_ID <= 0; ID_EX <= 0; EX_WB <= 0;
        for (i=0; i<REG_WIDTH; i=i+1) reg_file[i] <= 0;
    end else begin
        // --- Write Back (WB) ---
        if (EX_WB[7:6] == LOAD || EX_WB[7:6] == ADD || EX_WB[7:6] == SUB || EX_WB[7:6] == AND) begin
            reg_file[EX_WB[5:4]] <= mem_data;
        end

        // --- Pipeline Shift ---
        EX_WB <= ID_EX;
        ID_EX <= IF_ID;
        IF_ID <= instr_mem[PC];

        // --- PC increment ---
        if (PC < MEM_SIZE-1) PC <= PC + 1;
    end
end

// ====== For Simulation: Display Pipeline Stages ======
always @(posedge clk) begin
    $display("Time=%0d | PC=%0d", $time, PC);
    $display("IF:  %b", instr_mem[PC]);
    $display("ID:  %b", IF_ID);
    $display("EX:  %b", ID_EX);
    $display("WB:  %b", EX_WB);
    $display("REGS: %d %d %d %d\n", reg_file[0], reg_file[1], reg_file[2], reg_file[3]);
end

endmodule
module testbench();
    reg clk = 0;
    reg rst = 1;

    pipeline_processor uut(.clk(clk), .rst(rst));

    // Clock generator
    always #5 clk = ~clk; // 10ns period

    initial begin
        // Reset for a cycle
        #10 rst = 0;
        // Simulate for several cycles (to see full pipeline operation)
        #200 $finish;
    end
endmodule
